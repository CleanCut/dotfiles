#!/usr/bin/env bash

function msg() {
    echo "ðŸš€ $1"
}

function warn() {
    echo "ðŸŸ¡ $1"
}

function error() {
    echo "ðŸ›‘ $1"
}

# We want to run from the same directory this script is located in
cd "$(dirname "${BASH_SOURCE[0]}")"

if [[ "$(uname)" == "Darwin" ]]; then
    OS="macos"
else
    # shellcheck disable=SC1091
    . /etc/os-release
    OS="$ID"
fi
msg "Operating System: ${OS}"

# Symlink all the files in homefiles/ into ~/
for f in homefiles/.*; do
    file=$(basename "$f")
    if [[ $file == "." || $file == ".." ]]; then
        continue
    fi
    msg "Symlinking ~/$file"
    ln -s -f "$(pwd)/homefiles/$file" "$HOME/$file" || error "Failed symlinking ~/$file"

done

# Symlink directories into ~/
for dir in bin gitcompletion tmux vim; do
    # Remove any exsting symlink
    if [[ -d "$dir" ]]; then
        rm -f "$HOME/.$dir" || error "$HOME/.$dir isn't a symlink like I expected, so I'm not replacing it."
    fi
    msg "Sym-linking ~/.$dir/"
    ln -s "$(pwd)/${dir}" "$HOME/.$dir" || error "Failed to sym-link ~/.$dir/"

done

function install_rust {
    msg "Installing Rust..."
    if [[ ! -f rustup-init.sh ]]; then
        curl --proto '=https' --tlsv1.2 -o rustup-init.sh -sSf https://sh.rustup.rs
        chmod a+x rustup-init.sh
    fi
    ./rustup-init.sh -y || error "Failed to install Rust ðŸ˜­"
    rm rustup-init.sh
}

# Is rust installed?
if ! rustc --version >/dev/null; then
    # BP Dev environment, automatically install rust
    if [[ $USER == "build" && $HOME == "/workspace" ]]; then
        install_rust
    elif [[ $OS == "macos" ]] ; then
        install_rust
    else
        warn "Rust is not installed. ðŸ˜•"
    fi
fi

msg "Resetting all vim plugins"
git submodule --quiet deinit -f --all 2>/dev/null
git submodule --quiet update --init --recursive || error "Failed to update vim plugins"



if [[ $OS == "macos" ]]; then
    if ! type brew &>/dev/null ; then
        msg "Homebrew is not installed, let's install it now!"
        if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" ; then
            error "Failed to install homebrew."
        fi
        eval "$(brew shellenv)"
        hash -r
    fi
    msg "Installing stuff we want from Homebrew..."
    brew bundle --quiet || error "Failed to install the stuff we want from Homebrew."
else
    if [[ $OS == "debian" || $OS == "ubuntu" ]]; then
    msg "Adding a .bashrc, because that's what $OS-based distros want."
    echo ". ~/.profile" >"$HOME"/.bashrc
    else
        error "I don't know what shell rc script changes to make on $OS"
    fi
fi

# Prompt about installing the private dotfiles next
if [[ -d "$HOME/.private" ]]; then
    msg "Success! Consider running ~/.private/install next."
else
    msg "Success!"
fi
